using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;

namespace ProfileIt
{
    class ProfileData
    {
        public class MethodProfileData
        {
            public long ticksTotal;
            public long calls;
            public MethodBase caller;
        }

        public struct ProfileState
        {
            public StackTrace stackTrace;
            public Stopwatch stopwatch;
        }

        internal static Dictionary<MethodBase, List<MethodProfileData>> profileData = null;

        public static  IDictionary<MethodBase, List<MethodProfileData>> Reset()
        {
            IDictionary<MethodBase, List<MethodProfileData>> lastData = profileData;
            profileData = new Dictionary<MethodBase, List<MethodProfileData>>();
            if (lastData == null)
            {
                return new Dictionary<MethodBase, List<MethodProfileData>>();
            }
            else
            {
                return lastData;
            }
        }

        internal static void PostProfile(ref ProfileState state)
        {
            state.stopwatch.Stop();
            /* 0 is PreProfile, 1 is the hook. 2 is the dynamic wrapper generated by Harmony. 3 is what we patched (hopefully) */
            if (state.stackTrace.FrameCount < 4)
            {
                // Bork?
                Logger.Log("Short stackframe:\n" + state.stackTrace.ToString());
                return;
            }

            if (profileData == null)
            {
                Reset();
            }

            MethodBase mb0 = state.stackTrace.GetFrame(2).GetMethod();
            MethodBase mb1 = state.stackTrace.GetFrame(3).GetMethod();

            if (!profileData.ContainsKey(mb0))
            {
                profileData[mb0] = new List<MethodProfileData>();
            }
            MethodProfileData md = profileData[mb0].FirstOrDefault(x => (x.caller == mb1));
            if (md == null)
            {
                md = new MethodProfileData();
                md.caller = mb1;
                profileData[mb0].Add(md);
            }

            md.calls++;
            md.ticksTotal += state.stopwatch.ElapsedTicks;
        }

        internal static void PreProfile(out ProfileState state)
        {
            state.stackTrace = new StackTrace(false);
            state.stopwatch = Stopwatch.StartNew();
        }

        public static void AddProfileIncl(MethodBase method, ref Stopwatch sw)
        {
            /* TODO: Give it the whole stack frame and record it.
             * -> stats by caller
             * -> can build Excl times when a profiled method calls another profiled method
             */
            
        }
    }
}
